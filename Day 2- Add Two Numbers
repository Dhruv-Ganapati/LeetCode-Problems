# Definition for singly-linked list.
class ListNode()
  def __init__(self, val = 0, next=None):
    self.val = val
    self.next = next

class Solution():
  def addTwoNumbers(self, l1:ListNode, l2:ListNode): ->ListNode
    head = ListNode()
    current = head
    carry = 0
    while(l1 != None or l2 != None or carry != 0):
      l1_value = l1.val if l1 else 0
      l2_value = l2.val if l2 else 0
      total = l1_value + l2_value + carry
      current.next = ListNode(total % 10)
      carry = total // 10
      # moving both l1 and l2 node (incrementing value)
      l1 = l1.next if l1 else 0
      l2 = l2.next if l2 else 0
    return head.next


# Function to convert List into Linked List
def list_to_linkList(lst):
  if not lst:
    return None
  head = LinkNode(lst[0])
  current = head
  for val in lst[1:]:
    current.next = ListNode(val)
    current = current.next
  return head


# Function to convert linked List into List
def linkList_to_List(head):
  current = head
  lst = []
  while current:
    lst.append(current.val)
    current = current.next
  return lst


l1 = [8, 6, 3]
l2 = [0, 8, 9, 1]

# Creating object from class
solution = Solutions()
result = solution.addTwoNumbers(list_to_linkList(l1), list_to_linkList(l2))

print("Input: \nl1:", l1)
print("l2: ", l2)

print("Result: ", linkList_to_List(result))
