""" 
Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
"""




# CODE:

class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        i, j = 0, 0
        merge = []
        while i < len(nums1) and j < len(nums2):
            if nums1[i] < nums2[j]:
                merge.append(nums1[i])
                i += 1
            else:
                merge.append(nums2[j])
                j += 1

        # Add remaining elements of nums1, if any
        merge.extend(nums1[i:])
        # Add remaining elements of nums2, if any
        merge.extend(nums2[j:])
        
        mid_index = len(merge) // 2
        if len(merge) % 2 == 0:
            median = (merge[mid_index] + merge[mid_index-1])/2
        else:
            median = merge[mid_index]
        
        return median


m = [1,3,4,5,6]
n = [2, 7]

solution = Solution()
result = solution.findMedianSortedArrays(m,n)
print(result)
          
