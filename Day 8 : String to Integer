"""
Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.

The algorithm for myAtoi(string s) is as follows:

Whitespace: Ignore any leading whitespace (" ").
Signedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity is neither present.
Conversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.
Rounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range. Specifically, integers less than -231 should be rounded to -231, and integers greater than 231 - 1 should be rounded to 231 - 1.
Return the integer as the final result.


"""

# CODE
class Solution:
    def myAtoi(self, s: str) -> int:
        out = 0
        neg = 1
        symbols = {"-":-1, 
        "+": 1}

        left = 0
        # step - 1
        while left < len(s) and s[left] == " ":
            left += 1               # skip it and move forward

        # step - 2
        if left < len(s) and s[left] in symbols:
            neg = symbols[s[left]]
            left += 1


        # step - 3 
        while left < len(s) and s[left].isdigit():
            out = out * 10 + int(s[left])
            left += 1
        
        # bound check
        val = out * neg
        if val >= 2 ** 31 -1:
            return 2 ** 31 -1
        elif val <= -2 ** 31:
            return -2 ** 31
        
        return val
